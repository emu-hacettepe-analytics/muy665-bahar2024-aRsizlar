---
title: "Göç İzleri"
number-sections: true
---

**Proje sayfamıza hoş geldiniz.**

*Projemizle ilgili güncellemelerden haberdar olmak için bu alanı takip edin.*

# Proje Genel Bakış ve Kapsamı

Türkiye'de 2018-2022 yılları arasında gerçekleşen göç istatistiklerini inceliyoruz.

## Veri

## Veri Kaynağı

<https://data.tuik.gov.tr/Bulten/Index?p=Ic-Goc-Istatistikleri-2022-49727>

## Veri Hakkında Genel Bilgiler

**Veri setimizdeki değişkenler**

il:Göç yapılan iller

yil:Hangi yıl göç yapıldığı

tayin:Göç nedenlerinden biri

isBulma:Göç nedenlerinden biri

egitim:Göç nedenlerinden biri

medeniDurum:Göç nedenlerinden biri

yasamKosullari:Göç nedenlerinden biri

Hane:Göç nedenlerinden biri

aile_yanina_donme:Göç nedenlerinden biri

saglik:Göç nedenlerinden biri

evAlma:Göç nedenlerinden biri

emeklilik:Göç nedenlerinden biri

## Tercih Sebebi

Bu veri setini seçmemizde bir kaç neden etkili olmuştur.

1.  **Analiz Amaçları**: Göç istatistikleri, birçok farklı alanda önemli bilgiler sağlayabilir. Örneğin, ekonomik kalkınma, işgücü hareketleri, eğitim, sağlık hizmetleri talebi gibi konuları analiz etmek için göç verileri kullanılabilir.

2.  **Zaman Aralığı**: Seçtiğimiz zaman aralığı (2018-2022), son beş yılda Türkiye'deki göç eğilimlerini incelememizi sağlamaktadır.Bu dönemdeki göç eğilimleri, ekonomik ya da sosyal değişikliklerin etkilerini değerlendirmemize yardımcı olabilir.

3.  **Kapsam**: Veri setimizin kapsamı Türkiye genelindeki farklı illeri içermesi nedeniyle farklı bölgeler arasındaki göç sayılarını inceleme fırsatını da bize sunmaktadır.Bu, bölgesel kalkınma eğilimlerini ve farklı illerdeki yaşam koşullarının etkilerini anlamamıza yardımcı olmaktadır.

4.  **Değişkenlerin Çeşitliliği**: Seçtiğimiz değişkenler, göç nedenlerini çeşitli açılardan analiz etmemize olanak tanır. Örneğin, iş bulma, eğitim imkanları, aile birleşimi gibi farklı faktörlerin göç kararları üzerindeki etkilerini değerlendirebiliriz

5.  **Toplumsal İhtiyaçlar**: Göç istatistikleri, toplumun belirli ihtiyaçlarını anlamak için kullanılabilir. Örneğin, sağlık hizmetlerine erişim, yaşam koşulları, ev alma gibi göç nedenlerinin toplumsal etkileri değerlendirilebilir.

## Ön İşleme

```{r, message=FALSE, results='asis'}
#| warning: false
#| code-summary: "Show the code"
#| code-fold: true
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggrepel)
library(reshape2)
library(gridExtra)
```

```{r, message=FALSE, results='asis'}
#| warning: false
#| code-summary: "Show the code"
#| code-fold: true
Sys.setlocale("LC_CTYPE", "turkish")
```

```{r, message=FALSE, results='asis'}
#| warning: false
#| code-summary: "Show the code"
#| code-fold: true
##exceldosyasını okuma
alinan_goc <- read_excel("goc_etme_nedenine_illerin_aldigi_goc.xlsx")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##veri setinin ilk bir kaç satırını gösterme
head(alinan_goc)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##alinan_goc veri çerçevesindeki veriyi daha "düzenli" bir formata dönüştürür ve new_tidy_data adında yeni bir veri seti oluşturur. Buradaki amaç, veriyi daha analiz edilebilir hale getirmek ve veri işleme sürecini kolaylaştırmaktır
##pivot_longer() fonksiyonu kullanılarak, veri çerçevesindeki sütunlar uzun formata dönüştürülür. Yani, her bir göç nedeni bir sütun yerine, il ve yil sütunları sabit kalacak şekilde, diğer sütunlar göç nedeni ve göç sayısı olacak şekilde yeniden yapılandırılır
##cols = -c(il, yil): il ve yil sütunları dışındaki tüm sütunlar işleme alınır names_to = "gocNedeni": Sütun adları, "gocNedeni" adında yeni bir sütuna dönüştürülür.
##mutate() fonksiyonu kullanılarak, "gocNedeni" sütunu karakter veri tipine dönüştürülür
##head() fonksiyonu kullanılarak, yeni oluşturulan new_tidy_data veri çerçevesinin ilk altı satırı ekrana yazdırılır

new_tidy_data <- alinan_goc %>%
  pivot_longer(cols = -c(il, yil), names_to = "gocNedeni", values_to = "gocSayisi") %>%
  mutate(gocNedeni = as.character(gocNedeni))
head(new_tidy_data)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##veri setindeki sütun adlarını döndürür
colnames(new_tidy_data)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##new_tidy_data veri setindeki her sütundaki eksik değerlerin sayısını hesaplama
colSums(is.na(new_tidy_data))
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##data setinin yapısını özetleme
str(new_tidy_data)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##new_tidy_data veri setindeki tekrarlanan satırların sayısını hesaplar.
sum(duplicated(new_tidy_data))
```

Veri setimizdeki Göç Sayılarının bulunduğu sütunun özet istatistikleri görülmektedir.

2018-2022 yılları arasındaki minimum göç sayısı 2'dir.

2018-2022 yılları arasındaki maximum göç sayısı 152.756'dır.

2018-2022 yılları arasında yapılan ortalama göç sayısı 2979,1'dir

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##new_tidy_data veri setindeki "gocSayisi" adlı sütunun özet istatistikleri hesaplanır
summary(new_tidy_data$gocSayisi)
```

Minimum göç sayısının 2 olduğunu aşağıdaki tabloda görüyoruz.

2018-2022 yılları arasında minimum göç 2022 yılında emeklilik nedeniyle Hakkari'ye yapılmıştır.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##new_tidy_data veri setindeki verileri gocSayisi sütununa göre sıralama ve ilk altı satırını ekrana yazdırma
new_tidy_data %>% arrange(gocSayisi) %>% head()
```

Maximum göç sayısının 152.756 olduğunu aşağıdaki tabloda görüyoruz.

2018-2022 yılları arasında maximum göç 2019 yılında yaşam koşulları nedeniyle İstanbul'a yapılmıştır.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##new_tidy_data veri setindeki verileri gocSayisi sütununa göre azalan sıraya göre sıralama ve ilk altı satırını ekrana yazdırma
new_tidy_data %>% arrange(desc(gocSayisi)) %>% head()
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
## new_tidy_data veri setindeki veriler arasından gocSayisi sütunundaki en yüksek 10 değerigösterme
new_tidy_data %>% top_n(10, gocSayisi)
```

# Analizler

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(ggplot2)

veri <- data.frame( Yil = c(2018,2019,2020,2021,2022),
                    Toplam_Ic_Goc = c(3057606,2806123,2258726,2777797,2791156))

ggplot(veri, aes( x = Yil, y = Toplam_Ic_Goc)) +
  geom_bar(stat = "identity" , fill = "red" , color = "black") +
  labs(title = "Yıllara Göre Göç Sayısı" , x = "Yıl" , y = "Toplam İç Göç") +
  scale_y_continuous(labels = scales::comma)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##alinan_goc veri çerçevesindeki veriyi daha "düzenli" bir formata dönüştürür ve new_tidy_data adında yeni bir veri seti oluşturur. Buradaki amaç, veriyi daha analiz edilebilir hale getirmek ve veri işleme sürecini kolaylaştırmaktır
##pivot_longer() fonksiyonu kullanılarak, veri çerçevesindeki sütunlar uzun formata dönüştürülür. Yani, her bir göç nedeni bir sütun yerine, il ve yil sütunları sabit kalacak şekilde, diğer sütunlar göç nedeni ve göç sayısı olacak şekilde yeniden yapılandırılır
##cols = -c(il, yil): il ve yil sütunları dışındaki tüm sütunlar işleme alınır names_to = "gocNedeni": Sütun adları, "gocNedeni" adında yeni bir sütuna dönüştürülür.
##mutate() fonksiyonu kullanılarak, "gocNedeni" sütunu karakter veri tipine dönüştürülür
##head() fonksiyonu kullanılarak, yeni oluşturulan new_tidy_data veri çerçevesinin ilk altı satırı ekrana yazdırılır

new_tidy_data <- alinan_goc %>%
  pivot_longer(cols = -c(il, yil), names_to = "gocNedeni", values_to = "gocSayisi") %>%
  mutate(gocNedeni = as.character(gocNedeni))

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Veri setindeki göç nedenlerini yıllara göre topla
##group_by() fonksiyonu kullanılarak new_tidy_data veri setindeki "yil" ve "gocNedeni" sütunlarına göre gruplanır. Daha sonra summarise() fonksiyonu ile her yıl ve göç nedeni kombinasyonu için toplam göç sayısı hesaplanır.
summarized_data <- new_tidy_data %>%
  group_by(yil, gocNedeni) %>%
  summarise(total_gocSayisi = sum(gocSayisi), .groups = "drop")
# Bar plot oluştur
ggplot(summarized_data, aes(x = factor(yil), y = total_gocSayisi, fill = gocNedeni)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Göç Nedenlerine Göre Yıllara Göre Dağılım",
       x = "Yıl",
       y = "Toplam Göç Sayısı",
       fill = "Göç Nedeni") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::number_format())
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##boxplot data görselleştirme
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
   #TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2020 , bolge != "Diger"), aes(x = gocNedeni, y = gocSayisi, fill = bolge)) +
  geom_boxplot() +
  labs(title = "2020 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Bölge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))+
 scale_y_continuous(trans = 'log10', labels = function(x) format(x, scientific = FALSE))  # Y eksenini logaritmik ölçekleme yaparak ayarla
```

grafik, 2020 yılına ait göç nedenleri ve Türkiye'nin bölgelerine göre dağılımını logaritmik ölçekte gösteren bir kutu grafiği (box plot) biçimindedir. Kutu grafikler, veri dağılımının merkezi eğilimini, yayılımını ve aykırı değerlerini göstermek için kullanılır. Her kutu, verinin medyanını, alt ve üst çeyreklerini (yani %25 ve %75'lik dilimlerini), ve aykırı değerleri temsil eder. Bu grafikten çıkarılabilecek başlıca gözlemler şunlardır:

Bölgesel Farklılıklar:

Marmara Bölgesi: Marmara, çoğu göç nedeninde yüksek medyan değerlere sahip, bu da bölgenin diğerlerine göre daha fazla göç aldığını gösteriyor. İş bulma, eğitim ve aile yanına dönme gibi nedenlerde özellikle belirgin. Doğu ve Güneydoğu Anadolu: Bu bölgeler, göç sayıları açısından genellikle daha düşük medyan değerlere sahip, bu da daha az göç aldıklarını veya bu bölgelerden göç veren kişi sayısının daha fazla olduğunu düşündürebilir.

Göç Nedenleri Arasındaki Farklar:

İş Bulma ve Eğitim: Bu iki neden, çoğu bölgede yüksek göç sayıları ile öne çıkıyor. Bu, özellikle genç nüfusun ve iş arayanların daha iyi fırsatlar peşinde diğer bölgelere taşındığını gösteriyor. Sağlık: Sağlık nedeniyle yapılan göçler, bölgeden bölgeye farklılık gösteriyor, ancak bazı bölgelerde (örneğin Ege ve İç Anadolu) bu nedenle göç sayısı diğerlerinden daha yüksek.

Aykırı Değerler: Grafikteki aykırı değerler (kutuların üst ve altında yer alan noktalar), olağandışı yüksek veya düşük göç sayılarını gösterir. Örneğin, bazı bölgelerde iş bulma ve eğitim nedeniyle göç sayılarındaki olağan dışı artışlar dikkat çekiyor.

Logaritmik Ölçek: Grafikte logaritmik ölçek kullanılması, göç sayılarının geniş aralıklarını daha iyi göstermek için yapılmış. Bu sayede düşük ve yüksek değerler arasındaki farklar daha kolay fark edilebilir.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
##cor() fonksiyonu kullanılarak alinan_goc veri setindeki belirli sütunlar arasındaki korelasyonlar hesaplanır.
# Korelasyon matrisini hesapla
##cor() fonksiyonu, alinan_goc veri setindeki 3. sütundan 11. sütuna kadar olan sütunlardaki değişkenler arasındaki korelasyonları hesaplar. use = "complete.obs" argümanı, eksik değerleri içeren gözlemleri hesaplama işleminden çıkarır.
correlation_matrix <- cor(alinan_goc[, c(3:11)], use = "complete.obs")
melted_corr_matrix <- melt(correlation_matrix)
##Daha sonra, melt() fonksiyonu kullanılarak korelasyon matrisi eritilir
##melted_corr_matrix <- melt(correlation_matrix) ggplot2 paketi kullanılarak korelasyon matrisi görselleştirilir. 
##geom_tile() fonksiyonu ile korelasyon matrisi, renkli kareler olarak gösterilir. geom_text() fonksiyonu ile her karenin içine korelasyon değerleri yazdırılır. 
##labs() fonksiyonu ile x ve y eksenlerine etiketler eklenir. guides() fonksiyonu ile renk gradyanı için bir renk skalası eklenebilir. Son olarak, theme() fonksiyonları ile grafik stili ayarlanır.
# Ve Korelasyon matrisini görselleştirilir
ggplot(melted_corr_matrix, aes(Var1, Var2, fill = value)) +
  geom_tile() + 
   geom_text(aes(label = sprintf("%.2f", value)), color = "black", size = 3) +
  labs(x = " ", y = " ") + 
  guides(color = guide_legend(title = "Değer")) + 
  scale_fill_gradient2(low = "yellow", high = "red", mid = "white", midpoint = 0.7) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   **Göç Nedenleri Arasındaki Korelasyonu Hesaplama ve Görselleştirme**

    Korelasyon matrisi görselleştirmesi (heatmap), veri setindeki değişkenler arasındaki ilişkileri görsel olarak anlamak için güçlü bir araçtır.Örneğin, pozitif korelasyonlar, bir değişkenin artışıyla diğer değişkenin de arttığını gösterir. Bu, iki değişken arasında bir ilişki olduğunu ve bir değişkenin diğerini etkileyebileceğini gösterir.

-   Değişkenler arasında korelasyon büyüklükleri incelendiğinde göç nedeni olarak tayin'in, medeni durum ve Hane ile pozitif yönlü ve güçlü bir ilişkisi olduğu görülmektedir. Ek olarak iş bulma ile yaşam koşulları arasında benzer şekilde pozitif yönlü ve güçlü bir ilişkisi olduğu görülmektedir.

-   Aile yanına dönme, göç nedenleri arasında en düşük oranda ilişkiye sahiptir.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Gerekli kütüphaneleri yükleyin
library(readxl)
library(ggplot2)
library(dplyr)

# Veri setini yükleyin
migration_data <- read_excel("migration_rate.xls")

# 2020 yılına ait verileri filtreleyin
data_2020 <- migration_data %>% filter(Yil == 2020)

# Negatif ve pozitif nüfus değişimlerini ayırın
data_2020 <- data_2020 %>%
  mutate(
    Goc_Turu = ifelse(`Nufus degisimi` < 0, "Verilen Göç", "Alinan Göç"),
    Renk = ifelse(`Nufus degisimi` < 0, "Mavi", "Kirmizi"),
    Abs_Degisim = abs(`Nufus degisimi`)
  )

# Jitter plot oluşturun
ggplot(data_2020, aes(x = Goc_Turu, y = Abs_Degisim, color = Renk)) +
  geom_jitter(width = 0.3, size = 3, alpha = 0.5) +
  scale_color_manual(values = c("Kirmizi" = "red", "Mavi" = "blue")) +
  labs(
    title = "2020 Yılında İllere Göre Göç Durumu",
    x = "",
    y = "Nüfus Değişimi (Mutlak Değer)"
  ) +
  theme_minimal()
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Sys.setlocale("LC_CTYPE", "turkish")
# library(sf)
# library(ggplot2)
# library(dplyr)

#### 2. Shapefile Dosyasının Yüklenmesi:

# Shapefile dosyasının yolunu belirleme
# shapefile_path <- "C:/Users/goktu/Desktop/Migration/gadm36_TUR_shp/gadm41_TUR_1.shp"

# Shapefile dosyasını yükleme
# turkiye_sf <- st_read(shapefile_path)

#### 3. Verilerin Hazırlanması:

# Verilerin yüklenmesi
# nufus_degisim_verisi <- data.frame(
#   yil = c(2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020),
#   il = c("Adana", "Adiyaman", "Afyonkarahisar", "Agri", "Amasya", "Ankara", "Antalya", "Artvin", "Aydin", "Balikesir", "Bilecik", "Bingol", "Bitlis", "Bolu", "Burdur", "Bursa", "Canakkale", "Cankiri", "Corum", "Denizli", "Diyarbakir", "Edirne", "Elazig", "Erzincan", "Erzurum", "Eskisehir", "Gaziantep", "Giresun", "Gumushane", "Hakkari", "Hatay", "Isparta", "Mersin", "Istanbul", "Izmir", "Kars", "Kastamonu", "Kayseri", "Kirklareli", "Kirsehir", "Kocaeli", "Konya", "Kutahya", "Malatya", "Manisa", "Kahramanmaras", "Mardin", "Mugla", "Mus", "Nevsehir", "Nigde", "Ordu", "Rize", "Sakarya", "Samsun", "Siirt", "Sinop", "Sivas", "Tekirdag", "Tokat", "Trabzon", "Tunceli", "Sanliurfa", "Usak", "Van", "Yozgat", "Zonguldak", "Aksaray", "Bayburt", "Karaman", "Kirikkale", "Batman", "Sirnak", "Bartin", "Ardahan", "Igdir", "Yalova", "Karabuk", "Kilis", "Osmaniye", "Duzce"),
#   nufus_degisim = c(1256, -773, -995, -9727, 894, 11997, 20710, -1443, 4459, 9154, -142, -1136, -2173, -1135, -2221, 23099, 2033, -2659, 621, 1164, -3891, -2012, -5637, -91, -9815, -157, 861, 286, -11965, -1194, 5895, -5026, 13083, -53022, 14772, -4742, -1151, 1733, 2256, -875, 22550, -4992, -3341, 869, 7170, 1360, 629, 13380, -4828, 351, -2239, 5492, -147, 6041, 7612, -3914, -778, -5395, 22296, -16906, -745, -520, -9474, -1672, -11493, -3495, -4350, -103, -3006, -230, -4424, 1005, -547, 144, -1130, 186, 4380, -4602, -1397, 2780, 1192)
# )

#### 4. İllerin Geometrik Merkezlerinin Bulunması:

# Shapefile ile veri çerçevesini birleştirme
# turkiye_veri <- turkiye_sf %>%
#   left_join(nufus_degisim_verisi, by = c("NAME_1" = "il"))

# NA değerlerini kaldırma
# turkiye_veri <- na.omit(turkiye_veri)

# Geometrik merkezlerin koordinatlarını çıkarma ve veri çerçevesine ekleme
# turkiye_centroids <- turkiye_veri %>%
#   st_centroid() %>%
#   st_as_sf()

# Geometrik merkezlerin koordinatlarını çıkarma
# turkiye_centroids_coords <- st_coordinates(turkiye_centroids)
# turkiye_centroids_df <- as.data.frame(turkiye_centroids_coords)
# turkiye_centroids_df$nufus_degisim <- turkiye_veri$nufus_degisim

#### 5. Haritanın Çizilmesi ve Noktaların Gösterilmesi:

# Haritanın oluşturulması
# ggplot(data = turkiye_sf) +
#   geom_sf() +  # Türkiye haritasını çizin
#   geom_point(data = turkiye_centroids_df, 
#              aes(x = X, y = Y, size = abs(nufus_degisim), color = nufus_degisim > 0), 
#              alpha = 0.7) +  # Noktaları ekleyin
#   scale_color_manual(values = c("TRUE" = "red", "FALSE" = "blue"), labels = c("TRUE" = "Göç Alan", "FALSE" = "Göç Veren")) +
#   theme_minimal() +
#   labs(title = "Türkiye Haritası",
#        subtitle = "İllerin Nüfus Değişimleri (2020)",
#        x = "Enlem", 
#        y = "Boylam",
#        size = "Nüfus Değişimi",
#        color = "Durum")
```

![](images/clipboard-4123355109.png)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Gerekli kütüphaneleri yükleyin
library(ggplot2)
library(dplyr)

# Veri setini yükleyin
migration_data <- read_excel("migration_rate.xls")

# 2020 yılına ait verileri filtreleyin ve en yüksek 5 değeri seçin
top_5_migration_2020 <- migration_data %>%
  filter(Yil == 2020) %>%
  arrange(desc(`Nufus degisimi`)) %>%
  head(5)

print(top_5_migration_2020)


```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Gerekli kütüphaneleri yükleyin
library(ggplot2)
library(dplyr)

# Veri setini yükleyin
migration_data <- read_excel("migration_rate.xls")

# 2020 yılına ait verileri filtreleyin ve en yüksek 5 değeri seçin
top_10_migration_2020 <- migration_data %>%
  filter(Yil == 2020) %>%
  arrange(desc(`Nufus degisimi`)) %>%
  head(5)

# Bar plot'u oluşturun ve her barın değerini sağa hizalayarak yazdırın
ggplot(top_5_migration_2020, aes(x = reorder(il, `Nufus degisimi`), y = `Nufus degisimi`)) +
  geom_bar(stat = "identity", fill = "darkred") +
  geom_text(aes(label = `Nufus degisimi`), hjust = 1.25, vjust = 0.25, size = 4, color = "white") +  # Her barın en altına değerleri sağa hizalayarak yazdır
  labs(title = "2020 Yılında En Yüksek Göç Nufus degisimi Alan İller",
       x = "il",
       y = "Nufus degisimi") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()


```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Gerekli kütüphaneleri yükleyin
library(readxl)
library(ggplot2)
library(dplyr)

# Veri setini yükleyin
migration_data <- read_excel("migration_rate.xls")

# 2020 yılına ait verileri filtreleyin ve en düşük 5 değeri seçin
bottom_5_migration_2020 <- migration_data %>%
  filter(Yil == 2020) %>%
  arrange(`Nufus degisimi`) %>%
  head(5)

print(bottom_5_migration_2020)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Gerekli kütüphaneleri yükleyin
library(ggplot2)
library(dplyr)

# Veri setini yükleyin
migration_data <- read_excel("migration_rate.xls")

# 2020 yılına ait verileri filtreleyin ve en düşük 5 değeri seçin
top_5_migration_2020 <- migration_data %>%
  filter(Yil == 2020) %>%
  arrange(`Nufus degisimi`) %>%
  head(5)

# Mutlak değerlerini alın ve yeni bir sütun ekleyin
top_5_migration_2020 <- top_5_migration_2020 %>%
  mutate(abs_nufus_degisim = abs(`Nufus degisimi`))

# Bar plot'u oluşturun ve her barın değerini sağa hizalayarak yazdırın
ggplot(top_5_migration_2020, aes(x = reorder(il, abs_nufus_degisim), y = abs_nufus_degisim)) +
  geom_bar(stat = "identity", fill = "darkblue") +
  geom_text(aes(label = abs_nufus_degisim), hjust = 1.25, vjust = 0.25, size = 4, color = "white") +  # Her barın en altına değerleri sağa hizalayarak yazdır
  labs(title = "2020 Yılında En Düşük Göç Nufus degisimi Alan İller (Mutlak Değer)",
       x = "İl",
       y = "Nufus Değişimi (Mutlak Değer)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
Sys.setlocale("LC_CTYPE", "turkish")
library(ggplot2)
library(dplyr)
library(tidyr)  # tidyr paketini yükleyin
# Veriler
alinan_goc_sayilari <- c(33557, 37342, 21352, 22170, 88975, 65478, 2323, 2086, 8028, 1006)
verilen_goc_sayilari <- c(28864, 20465, 20885, 18714, 90731, 94113, 23643, 3290, 22305, 3667)
goc_nedenleri <- c("Tayin", "İş Bulma", "Eğitim", "Medeni Durum", "Yaşam Koşulları", "Hane", "Memlekete Dönme", "Sağlık", "Ev Alınması", "Emeklilik")

# Data frame oluşturma
istanbul_goc_nedenleri_2020 <- data.frame(
  Goc_Nedeni = goc_nedenleri,
  Alinan_Goc = alinan_goc_sayilari,
  Verilen_Goc = verilen_goc_sayilari
)

print(istanbul_goc_nedenleri_2020)
# Veriyi uzun formata dönüştürme
istanbul_goc_nedenleri_2020_long <- istanbul_goc_nedenleri_2020 %>%
  pivot_longer(cols = c("Alinan_Goc", "Verilen_Goc"), names_to = "Goc_Tipi", values_to = "Goc_Sayisi")

# Bar plot oluşturma
ggplot(istanbul_goc_nedenleri_2020_long, aes(x = Goc_Nedeni, y = Goc_Sayisi, fill = Goc_Tipi)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("Alinan_Goc" = "red", "Verilen_Goc" = "blue"), labels = c("Alinan_Goc" = "Alınan Göç", "Verilen_Goc" = "Verilen Göç")) +
  labs(title = "2020 Yılında İstanbul'a Alınan ve Verilen Göç Nedenleri",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Göç Tipi") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
Sys.setlocale("LC_CTYPE", "turkish")
library(ggplot2)
library(dplyr)
library(tidyr)  # tidyr paketini yükleyin
# Veriler
alinan_goc_sayilari <- c(7627, 7615, 6258, 4340, 14828, 18449, 904, 443, 2507, 267)
verilen_goc_sayilari <- c(5689, 4018, 4311, 3702, 11388, 12546, 2776, 467, 1761, 314)
goc_nedenleri <- c("Tayin", "İş Bulma", "Eğitim", "Medeni Durum", "Yaşam Koşulları", "Hane", "Memlekete Dönme", "Sağlık", "Ev Alınması", "Emeklilik")

# Data frame oluşturma
Bursa_goc_nedenleri_2020 <- data.frame(
  Goc_Nedeni = goc_nedenleri,
  Alinan_Goc = alinan_goc_sayilari,
  Verilen_Goc = verilen_goc_sayilari
)

print(Bursa_goc_nedenleri_2020)
# Veriyi uzun formata dönüştürme
Bursa_goc_nedenleri_2020_long <- Bursa_goc_nedenleri_2020 %>%
  pivot_longer(cols = c("Alinan_Goc", "Verilen_Goc"), names_to = "Goc_Tipi", values_to = "Goc_Sayisi")

# Bar plot oluşturma
ggplot(Bursa_goc_nedenleri_2020_long, aes(x = Goc_Nedeni, y = Goc_Sayisi, fill = Goc_Tipi)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("Alinan_Goc" = "red", "Verilen_Goc" = "blue"), labels = c("Alinan_Goc" = "Alınan Göç", "Verilen_Goc" = "Verilen Göç")) +
  labs(title = "2020 Yılında Bursa için Alınan ve Verilen Göç Nedenleri",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Göç Tipi") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
Sys.setlocale("LC_CTYPE", "turkish")
library(ggplot2)
library(dplyr)
library(tidyr)  # tidyr paketini yükleyin
# Veriler
alinan_goc_sayilari <- c(2155, 1224, 2597, 1104, 5315, 5578, 950, 255, 583, 211)
verilen_goc_sayilari <- c(3271, 3388, 2897, 1578, 6280, 10526, 588, 243, 1753, 208)
goc_nedenleri <- c("Tayin", "İş Bulma", "Eğitim", "Medeni Durum", "Yaşam Koşulları", "Hane", "Memlekete Dönme", "Sağlık", "Ev Alınması", "Emeklilik")

# Data frame oluşturma
Tokat_goc_nedenleri_2020 <- data.frame(
  Goc_Nedeni = goc_nedenleri,
  Alinan_Goc = alinan_goc_sayilari,
  Verilen_Goc = verilen_goc_sayilari
)

print(Tokat_goc_nedenleri_2020)
# Veriyi uzun formata dönüştürme
Tokat_goc_nedenleri_2020_long <- Tokat_goc_nedenleri_2020 %>%
  pivot_longer(cols = c("Alinan_Goc", "Verilen_Goc"), names_to = "Goc_Tipi", values_to = "Goc_Sayisi")

# Bar plot oluşturma
ggplot(Tokat_goc_nedenleri_2020_long, aes(x = Goc_Nedeni, y = Goc_Sayisi, fill = Goc_Tipi)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  scale_fill_manual(values = c("Alinan_Goc" = "red", "Verilen_Goc" = "blue"), labels = c("Alinan_Goc" = "Alınan Göç", "Verilen_Goc" = "Verilen Göç")) +
  labs(title = "2020 Yılında Tokat için Alınan ve Verilen Göç Nedenleri",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Göç Tipi") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
