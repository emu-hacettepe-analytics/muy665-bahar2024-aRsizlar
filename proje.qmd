---
title: "Proje X (proje adını yazınız)"
number-sections: true
---

**Proje sayfamıza hoş geldiniz.**

*Projemizle ilgili güncellemelerden haberdar olmak için bu alanı takip edin.*

(Aşağıdaki başlıklar örnek olarak verilmiştir; lütfen gerektiği şekilde düzenlemekten çekinmeyin.)

# Proje Genel Bakış ve Kapsamı

xxxxxx

# Veri

xxxxxx

## Veri Kaynağı

xxxxxx

## Veri Hakkında Genel Bilgiler

xxxxxx

## Tercih Sebebi

xxxxxx

## Ön İşleme

```{r}

library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggrepel)
library(reshape2)
library(gridExtra)
```

```{r}
##exceldosyasını okuma
alinan_goc <- read_excel("goc_etme_nedenine_illerin_aldigi_goc.xlsx")
```

```{r}
head(alinan_goc)
```

-   **Göç Nedenleri Arasındaki Korelasyonu Hesaplama ve Görselleştirme**

```{r}
##cor() fonksiyonu kullanılarak alinan_goc veri setindeki belirli sütunlar arasındaki korelasyonlar hesaplanır.
# Korelasyon matrisini hesapla
##cor() fonksiyonu, alinan_goc veri setindeki 3. sütundan 11. sütuna kadar olan sütunlardaki değişkenler arasındaki korelasyonları hesaplar. use = "complete.obs" argümanı, eksik değerleri içeren gözlemleri hesaplama işleminden çıkarır.
correlation_matrix <- cor(alinan_goc[, c(3:11)], use = "complete.obs")
melted_corr_matrix <- melt(correlation_matrix)
##Daha sonra, melt() fonksiyonu kullanılarak korelasyon matrisi eritilir
##melted_corr_matrix <- melt(correlation_matrix) ggplot2 paketi kullanılarak korelasyon matrisi görselleştirilir. 
##geom_tile() fonksiyonu ile korelasyon matrisi, renkli kareler olarak gösterilir. geom_text() fonksiyonu ile her karenin içine korelasyon değerleri yazdırılır. 
##labs() fonksiyonu ile x ve y eksenlerine etiketler eklenir. guides() fonksiyonu ile renk gradyanı için bir renk skalası eklenebilir. Son olarak, theme() fonksiyonları ile grafik stili ayarlanır.
# Ve Korelasyon matrisini görselleştirilir
ggplot(melted_corr_matrix, aes(Var1, Var2, fill = value)) +
  geom_tile() + 
   geom_text(aes(label = sprintf("%.2f", value)), color = "black", size = 3) +
  labs(x = " ", y = " ") + 
  guides(color = guide_legend(title = "Değer")) + 
  scale_fill_gradient2(low = "yellow", high = "red", mid = "white", midpoint = 0.7) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 100, hjust = 1))
```

-   **Göç Nedenleri ve Göç Sayıları Sütunları Oluşturmak**

```{r}
##alinan_goc veri çerçevesindeki veriyi daha "düzenli" bir formata dönüştürür ve new_tidy_data adında yeni bir veri seti oluşturur. Buradaki amaç, veriyi daha analiz edilebilir hale getirmek ve veri işleme sürecini kolaylaştırmaktır
##pivot_longer() fonksiyonu kullanılarak, veri çerçevesindeki sütunlar uzun formata dönüştürülür. Yani, her bir göç nedeni bir sütun yerine, il ve yil sütunları sabit kalacak şekilde, diğer sütunlar göç nedeni ve göç sayısı olacak şekilde yeniden yapılandırılır
##cols = -c(il, yil): il ve yil sütunları dışındaki tüm sütunlar işleme alınır names_to = "gocNedeni": Sütun adları, "gocNedeni" adında yeni bir sütuna dönüştürülür.
##mutate() fonksiyonu kullanılarak, "gocNedeni" sütunu karakter veri tipine dönüştürülür
##head() fonksiyonu kullanılarak, yeni oluşturulan new_tidy_data veri çerçevesinin ilk altı satırı ekrana yazdırılır

new_tidy_data <- alinan_goc %>%
  pivot_longer(cols = -c(il, yil), names_to = "gocNedeni", values_to = "gocSayisi") %>%
  mutate(gocNedeni = as.character(gocNedeni))
head(new_tidy_data)
```

```{r}
colSums(is.na(new_tidy_data))
```

```{r}
any(is.na(new_tidy_data))
```

```{r}
colnames(new_tidy_data)
```

```{r}
str(new_tidy_data)
```

```{r}
colSums(is.na(new_tidy_data))
```

```{r}
sum(duplicated(new_tidy_data))
```

```{r}
summary(new_tidy_data$gocSayisi)
```

```{r}
new_tidy_data %>% arrange(gocSayisi) %>% head()
```

```{r}
new_tidy_data %>% arrange(desc(gocSayisi)) %>% head()
```

```{r}
new_tidy_data %>% top_n(10, gocSayisi)
```

```{r}
toplam_goc_sayisi <- function(new_tidy_data, il, yil) {
  toplam <- sum(new_tidy_data$gocSayisi[new_tidy_data$il == il & new_tidy_data$yil == yil])
  return(toplam)
}

# Örneğin, Adana'daki 2022 yılındaki toplam göç sayısını bulmak için:
print(paste("Adana'da 2022 yılındaki toplam goc sayısı:", toplam_goc_sayisi(new_tidy_data, "Adana", 2022)))
print(paste("İstanbul'da 2022 yılındaki toplam goc sayısı:", toplam_goc_sayisi(new_tidy_data, "Istanbul", 2022)))
```

```{r}
max_goc_2022 <- new_tidy_data %>% 
  filter(yil == 2022) %>%
  select(gocSayisi, gocNedeni) %>%
  filter(gocSayisi == max(gocSayisi))

print(max_goc_2022)
```

```{r}
min_goc_2022 <- new_tidy_data %>% 
  filter(yil == 2022) %>%
  select(gocSayisi, gocNedeni) %>%
  filter(gocSayisi == min(gocSayisi))

print(min_goc_2022)
```

```{r}
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
    TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))

ggplot(new_tidy_data %>% filter(yil == 2022), aes(gocNedeni, gocSayisi, color = bolge)) +
  geom_point() +
  labs(title = "2022 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Goc Nedeni",
       y = "Goc Sayısı",
       color = "Bolge") +
  
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.10),
        axis.text.x = element_text(angle = 45, hjust = 1))  # X eksenindeki etiketleri 45 derece döndür
```

```{r}
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
    TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2022), aes(gocNedeni, gocSayisi, color = bolge)) +
  geom_jitter(width = 0.1, height = 0.1,alpha = 0.7) +  # Jittering ile daha fazla aralık
  labs(title = "2022 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Goc Nedeni",
       y = "Goc Sayısı",
       color = "Bolge") +
  scale_y_continuous(limits = c(2, max(90000)), breaks = seq(0, max(new_tidy_data$gocSayisi), by = 20000)) +  # Y ekseni aralığını ve etiketlerini ayarla
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.10),
        axis.text.x = element_text(angle = 45, hjust = 1))  # X eksenindeki etiketleri 45 derece döndür
```

```{r}
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
    TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2022), aes(x = gocNedeni, y = gocSayisi, fill = bolge)) +
  geom_boxplot() +
  labs(title = "2022 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "gocNedeni",
       y = "Goc Sayısı",
       fill = "Bolge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
```

# Analiz

xxxxxx

## Keşifsel Veri Analizi

xxxxxx

## Trend Analizi

xxxxxx

## Model Uydurma

xxxxxx

## Sonuçlar

xxxxxx

# Sonuçlar ve Ana Çıkarımlar

xxxxxx
