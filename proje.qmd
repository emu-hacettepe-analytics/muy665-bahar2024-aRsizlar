---
title: "Proje X (proje adını yazınız)"
number-sections: true
---

**Proje sayfamıza hoş geldiniz.**

*Projemizle ilgili güncellemelerden haberdar olmak için bu alanı takip edin.*

# Proje Genel Bakış ve Kapsamı

Türkiye'de 2018-2022 yılları arasında gerçekleşen göç istatistiklerini inceliyoruz.

## Veri

## Veri Kaynağı

<https://data.tuik.gov.tr/Bulten/Index?p=Ic-Goc-Istatistikleri-2022-49727>

## Veri Hakkında Genel Bilgiler

**Veri setimizdeki değişkenler**

il:Göç yapılan iller

yil:Hangi yıl göç yapıldığı

tayin:Göç nedenlerinden biri

isBulma:Göç nedenlerinden biri

egitim:Göç nedenlerinden biri

medeniDurum:Göç nedenlerinden biri

yasamKosullari:Göç nedenlerinden biri

Hane:Göç nedenlerinden biri

aile_yanina_donme:Göç nedenlerinden biri

saglik:Göç nedenlerinden biri

evAlma:Göç nedenlerinden biri

emeklilik:Göç nedenlerinden biri

## Tercih Sebebi

Bu veri setini seçmemizde bir kaç neden etkili olmuştur.

1.  **Analiz Amaçları**: Göç istatistikleri, birçok farklı alanda önemli bilgiler sağlayabilir. Örneğin, ekonomik kalkınma, işgücü hareketleri, eğitim, sağlık hizmetleri talebi gibi konuları analiz etmek için göç verileri kullanılabilir.

2.  **Zaman Aralığı**: Seçtiğimiz zaman aralığı (2018-2022), son beş yılda Türkiye'deki göç eğilimlerini incelememizi sağlamaktadır.Bu dönemdeki göç eğilimleri, ekonomik ya da sosyal değişikliklerin etkilerini değerlendirmemize yardımcı olabilir.

3.  **Kapsam**: Veri setimizin kapsamı Türkiye genelindeki farklı illeri içermesi nedeniyle farklı bölgeler arasındaki göç sayılarını inceleme fırsatını da bize sunmaktadır.Bu, bölgesel kalkınma eğilimlerini ve farklı illerdeki yaşam koşullarının etkilerini anlamamıza yardımcı olmaktadır.

4.  **Değişkenlerin Çeşitliliği**: Seçtiğimiz değişkenler, göç nedenlerini çeşitli açılardan analiz etmemize olanak tanır. Örneğin, iş bulma, eğitim imkanları, aile birleşimi gibi farklı faktörlerin göç kararları üzerindeki etkilerini değerlendirebiliriz

5.  **Toplumsal İhtiyaçlar**: Göç istatistikleri, toplumun belirli ihtiyaçlarını anlamak için kullanılabilir. Örneğin, sağlık hizmetlerine erişim, yaşam koşulları, ev alma gibi göç nedenlerinin toplumsal etkileri değerlendirilebilir.

## Ön İşleme

```{r, message=FALSE, results='asis'}
#| warning: false
#| code-summary: "Show the code"
#| code-fold: true
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggrepel)
library(reshape2)
library(gridExtra)
```

```{r}
Sys.setlocale("LC_CTYPE", "turkish")
```

```{r}
##exceldosyasını okuma
alinan_goc <- read_excel("goc_etme_nedenine_illerin_aldigi_goc.xlsx")
```

```{r}
##veri setinin ilk bir kaç satırını gösterme
head(alinan_goc)
```

```{r}
# Adana ili verisini seçme
adana_verisi <- subset(alinan_goc, il == "Adana")

# Tayin sayılarını görselleştirme
ggplot(data = adana_verisi, aes(x = yil, y = tayin)) +
  geom_line() +
  labs(x = "Yıl", y = "Tayin Nedeni ile Yapılan Göç Sayısı") +
  ggtitle("Yıllara Göre Adana İline Tayin Nedeni ile Yapılan Göç Sayısı")
```

```{r}

# İstanbul ili verisini seçme
istanbul_verisi <- subset(alinan_goc, il == "Istanbul")

# sağlık nedeni ile istanbula göç edenlerinin grafiğini çizme
ggplot(data = istanbul_verisi, aes(x = yil, y = saglik)) +
  geom_line() +
  labs(x = "Yıl", y = "Sağlık Nedeni İle Yapılan Göç Sayısı") +
  ggtitle("Yıllara Göre Istanbul İline Sağlık Nedeni İle Yapılan Göç Sayısı")
```

-   **Göç Nedenleri Arasındaki Korelasyonu Hesaplama ve Görselleştirme**

    Korelasyon matrisi görselleştirmesi (heatmap), veri setindeki değişkenler arasındaki ilişkileri görsel olarak anlamak için güçlü bir araçtır.Örneğin, pozitif korelasyonlar, bir değişkenin artışıyla diğer değişkenin de arttığını gösterir. Bu, iki değişken arasında bir ilişki olduğunu ve bir değişkenin diğerini etkileyebileceğini gösterir.

```{r}
##cor() fonksiyonu kullanılarak alinan_goc veri setindeki belirli sütunlar arasındaki korelasyonlar hesaplanır.
# Korelasyon matrisini hesapla
##cor() fonksiyonu, alinan_goc veri setindeki 3. sütundan 11. sütuna kadar olan sütunlardaki değişkenler arasındaki korelasyonları hesaplar. use = "complete.obs" argümanı, eksik değerleri içeren gözlemleri hesaplama işleminden çıkarır.
correlation_matrix <- cor(alinan_goc[, c(3:11)], use = "complete.obs")
melted_corr_matrix <- melt(correlation_matrix)
##Daha sonra, melt() fonksiyonu kullanılarak korelasyon matrisi eritilir
##melted_corr_matrix <- melt(correlation_matrix) ggplot2 paketi kullanılarak korelasyon matrisi görselleştirilir. 
##geom_tile() fonksiyonu ile korelasyon matrisi, renkli kareler olarak gösterilir. geom_text() fonksiyonu ile her karenin içine korelasyon değerleri yazdırılır. 
##labs() fonksiyonu ile x ve y eksenlerine etiketler eklenir. guides() fonksiyonu ile renk gradyanı için bir renk skalası eklenebilir. Son olarak, theme() fonksiyonları ile grafik stili ayarlanır.
# Ve Korelasyon matrisini görselleştirilir
ggplot(melted_corr_matrix, aes(Var1, Var2, fill = value)) +
  geom_tile() + 
   geom_text(aes(label = sprintf("%.2f", value)), color = "black", size = 3) +
  labs(x = " ", y = " ") + 
  guides(color = guide_legend(title = "Değer")) + 
  scale_fill_gradient2(low = "yellow", high = "red", mid = "white", midpoint = 0.7) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 100, hjust = 1))
```

-   **Göç Nedeni ve Göç Sayısı Sütunları Oluşturmak**

```{r}
##alinan_goc veri çerçevesindeki veriyi daha "düzenli" bir formata dönüştürür ve new_tidy_data adında yeni bir veri seti oluşturur. Buradaki amaç, veriyi daha analiz edilebilir hale getirmek ve veri işleme sürecini kolaylaştırmaktır
##pivot_longer() fonksiyonu kullanılarak, veri çerçevesindeki sütunlar uzun formata dönüştürülür. Yani, her bir göç nedeni bir sütun yerine, il ve yil sütunları sabit kalacak şekilde, diğer sütunlar göç nedeni ve göç sayısı olacak şekilde yeniden yapılandırılır
##cols = -c(il, yil): il ve yil sütunları dışındaki tüm sütunlar işleme alınır names_to = "gocNedeni": Sütun adları, "gocNedeni" adında yeni bir sütuna dönüştürülür.
##mutate() fonksiyonu kullanılarak, "gocNedeni" sütunu karakter veri tipine dönüştürülür
##head() fonksiyonu kullanılarak, yeni oluşturulan new_tidy_data veri çerçevesinin ilk altı satırı ekrana yazdırılır

new_tidy_data <- alinan_goc %>%
  pivot_longer(cols = -c(il, yil), names_to = "gocNedeni", values_to = "gocSayisi") %>%
  mutate(gocNedeni = as.character(gocNedeni))
head(new_tidy_data)
```

-   **Veri setimizde eksik değerler var mı?**

-   **Veri setimizin yapısı nasıl?**

```{r}
##veri setindeki sütun adlarını döndürür
colnames(new_tidy_data)

```

```{r}
##new_tidy_data veri setindeki her sütundaki eksik değerlerin sayısını hesaplama
colSums(is.na(new_tidy_data))
```

```{r}
##new_tidy_data veri setinde herhangi bir eksik değer olup olmadığını kontrol eder.
##any(): Bu fonksiyon, bir vektör veya matrisin herhangi bir elemanının belirtilen koşulu sağlayıp sağlamadığını kontrol eder. 
any(is.na(new_tidy_data))
```

```{r}
##data setinin yapısını özetleme
str(new_tidy_data)
```

```{r}
##new_tidy_data veri setindeki tekrarlanan satırların sayısını hesaplar.
sum(duplicated(new_tidy_data))
```

Veri setimizdeki Göç Sayılarının bulunduğu sütunun özet istatistikleri görülmektedir.

2018-2022 yılları arasındaki minimum göç sayısı 2'dir.

2018-2022 yılları arasındaki maximum göç sayısı 152.756'dır.

2018-2022 yılları arasında yapılan ortalama göç sayısı 2979,1'dir

```{r}
##new_tidy_data veri setindeki "gocSayisi" adlı sütunun özet istatistikleri hesaplanır
summary(new_tidy_data$gocSayisi)
```

Minimum göç sayısının 2 olduğunu aşağıdaki tabloda görüyoruz.

2018-2022 yılları arasında minimum göç 2022 yılında emeklilik nedeniyle Hakkari'ye yapılmıştır

```{r}
##new_tidy_data veri setindeki verileri gocSayisi sütununa göre sıralama ve ilk altı satırını ekrana yazdırma
new_tidy_data %>% arrange(gocSayisi) %>% head()
```

Maximum göç sayısının 152.756 olduğunu aşağıdaki tabloda görüyoruz

2018-2022 yılları arasında maximum göç 2019 yılında yaşam koşulları nedeniyle İstanbul'a yapılmıştır

```{r}
##new_tidy_data veri setindeki verileri gocSayisi sütununa göre azalan sıraya göre sıralama ve ilk altı satırını ekrana yazdırma
new_tidy_data %>% arrange(desc(gocSayisi)) %>% head()
```

```{r}

# İstanbul ili verisini seçme
istanbul_verisi2 <- subset(alinan_goc, il == "Istanbul")

# Tayin sayılarını görselleştirme
ggplot(data = istanbul_verisi2, aes(x = yil, y = yasamKosullari)) +
  geom_line() +
  labs(x = "Yıl", y = "Yaşam Koşulları") +
  ggtitle("İstanbul İline Yıllara Göre Yaşam Koşulları Nedeniyle Yapılan Göç Sayısı")
```

Grafikte de 2019 yılında yaşam koşulları nedeniyle 150000'den daha fazla kişinin İstanbul'a göç ettiğini görüyoruz.2020 yılından itibaren ise sayı düşmüştür.Bunun nedeni büyük ihtimalle pandemidir.

```{r}
## new_tidy_data veri setindeki veriler arasından gocSayisi sütunundaki en yüksek 10 değerigösterme
new_tidy_data %>% top_n(10, gocSayisi)
```

-   **Veri Setindeki Toplam Göç Sayısını Yazdıran Fonksiyon**

```{r}
##new_tidy_data veri setindeki toplam göç sayısını hesaplamak için bir fonksiyon tanımlar.
toplam_goc_sayisi <- function(new_tidy_data, il, yil) {
  toplam <- sum(new_tidy_data$gocSayisi[new_tidy_data$il == il & new_tidy_data$yil == yil])
  return(toplam)
}
##belirtilen il ve yıl için new_tidy_data veri çerçevesindeki göç sayılarını filtreler ve toplama 
# Örneğin, Adana'daki 2022 yılındaki toplam göç sayısını bulmak için:
print(paste("Adana'da 2022 yılındaki toplam goc sayısı:", toplam_goc_sayisi(new_tidy_data, "Adana", 2022)))
print(paste("İstanbul'da 2022 yılındaki toplam goc sayısı:", toplam_goc_sayisi(new_tidy_data, "Istanbul", 2019)))
```

**Yıllara Göre En Yüksek Göç Sayısı ve Göç Nedeni**

```{r}
##new_tidy_data veri setinde 2022 yılında en yüksek göç sayısı ve göç nedenini yazdırma
max_goc_2022 <- new_tidy_data %>% 
  filter(yil == 2022) %>%
  select(gocSayisi, gocNedeni) %>%
  filter(gocSayisi == max(gocSayisi))

print(max_goc_2022)
```

```{r}
min_goc_2022 <- new_tidy_data %>% 
  filter(yil == 2022) %>%
  select(gocSayisi, gocNedeni) %>%
  filter(gocSayisi == min(gocSayisi))

print(min_goc_2022)
```

**Veri Görselleştirme**

```{r}
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
    TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))

ggplot(new_tidy_data %>% filter(yil == 2022), aes(gocNedeni, gocSayisi, color = bolge)) +
  geom_point() +
  labs(title = "2022 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Goc Nedeni",
       y = "Goc Sayısı",
       color = "Bolge") +
  
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.10),
        axis.text.x = element_text(angle = 45, hjust = 1))  # X eksenindeki etiketleri 45 derece döndür
```

```{r}
##boxplot data görselleştirme
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
   #TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2022 , bolge != "Diger"), aes(x = gocNedeni, y = gocSayisi, fill = bolge)) +
  geom_boxplot() +
  labs(title = "2022 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Bölge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))+
 scale_y_continuous(trans = 'log10', labels = function(x) format(x, scientific = FALSE))  # Y eksenini logaritmik ölçekleme yaparak ayarla
```

```{r}
##boxplot data görselleştirme
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
   #TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2021 , bolge != "Diger"), aes(x = gocNedeni, y = gocSayisi, fill = bolge)) +
  geom_boxplot() +
  labs(title = "2021 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Bölge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))+
 scale_y_continuous(trans = 'log10', labels = function(x) format(x, scientific = FALSE))  # Y eksenini logaritmik ölçekleme yaparak ayarla
```

```{r}
##boxplot data görselleştirme
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
   #TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2020 , bolge != "Diger"), aes(x = gocNedeni, y = gocSayisi, fill = bolge)) +
  geom_boxplot() +
  labs(title = "2020 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Bölge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))+
 scale_y_continuous(trans = 'log10', labels = function(x) format(x, scientific = FALSE))  # Y eksenini logaritmik ölçekleme yaparak ayarla
```

```{r}
##boxplot data görselleştirme
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
   #TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2019 , bolge != "Diger"), aes(x = gocNedeni, y = gocSayisi, fill = bolge)) +
  geom_boxplot() +
  labs(title = "2019 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Bölge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))+
 scale_y_continuous(trans = 'log10', labels = function(x) format(x, scientific = FALSE))  # Y eksenini logaritmik ölçekleme yaparak ayarla
```

```{r}
##boxplot data görselleştirme
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
   #TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2018 , bolge != "Diger"), aes(x = gocNedeni, y = gocSayisi, fill = bolge)) +
  geom_boxplot() +
  labs(title = "2018 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Göç Nedeni",
       y = "Göç Sayısı",
       fill = "Bölge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))+
 scale_y_continuous(trans = 'log10', labels = function(x) format(x, scientific = FALSE))  # Y eksenini logaritmik ölçekleme yaparak ayarla
```

```{r}
# Veri setindeki göç nedenlerini yıllara göre topla
##group_by() fonksiyonu kullanılarak new_tidy_data veri setindeki "yil" ve "gocNedeni" sütunlarına göre gruplanır. Daha sonra summarise() fonksiyonu ile her yıl ve göç nedeni kombinasyonu için toplam göç sayısı hesaplanır.
summarized_data <- new_tidy_data %>%
  group_by(yil, gocNedeni) %>%
  summarise(total_gocSayisi = sum(gocSayisi))
# Bar plot oluştur
ggplot(summarized_data, aes(x = factor(yil), y = total_gocSayisi, fill = gocNedeni)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Göç Nedenlerine Göre Yıllara Göre Dağılım",
       x = "Yıl",
       y = "Toplam Göç Sayısı",
       fill = "Göç Nedeni") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::number_format())
```

```{r}
summarized_data2 <- new_tidy_data %>%
  filter(!is.na(bolge)) %>%  # NA olmayan bölge değerlerini filtrele
  group_by(bolge, yil) %>%
  summarise(total_gocSayisi = sum(gocSayisi))

# Bar plot oluştur
ggplot(summarized_data2, aes(x = factor(yil), y = total_gocSayisi, fill = bolge)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Bölge ve Yıllara Göre Göç Sayısı",
       x = "Yıl",
       y = "Toplam Göç Sayısı",
       fill = "Bölge") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = scales::number_format())
```

```{r}
new_tidy_data <- new_tidy_data %>%
  mutate(bolge = case_when(
    il %in% c("Istanbul", "Bursa", "Kocaeli", "Tekirdag","Balikesir","Canakkale","Bilecik","Edirne","Kirklareli","Sakarya","Yalova") ~ "Marmara",
    il %in% c("Izmir", "Aydin", "Manisa","Afyonkarahisar","Denizli","Kutahya","Manisa","Mugla","Usak") ~ "Ege",
    il %in% c("Ankara", "Konya", "Eskisehir","Cankiri","Corum","Kayseri","Kirsehir
","Konya","Nevsehir","Nigde","Sivas","Yozgat","Aksaray","Karaman","Kirikkale") ~ "Ic Anadolu",
    il %in% c("Artvin", "Giresun", "Ordu","Rize","Sinop","Tokat","Trabzon","Zonguldak","Amasya","Bolu","Gumushane","Kastamonu","Samsun","Sinop","Bayburt
","Bartin","Karabuk","Duzce") ~ "Karadeniz",
    il %in% c("Adana", "Antalya","Burdur","Hatay","Isparta","Kahramanmaras","Osmaniye") ~ "Akdeniz",
    il %in% c("Adiyaman","Diyarbakir","Gaziantep","Mardin","Siirt","Sanliurfa","Batman","Sirnak","Kilis") ~ "Guneydogu Anadolu",
    il %in% c("Agri","Bingol","Bitlis","Elazig","Erzincan","Erzurum","Hakkari","Kars","Malatya","Muş","Tunceli","Van","Ardahan","Igdir") ~ "Dogu Anadolu",
    TRUE ~ "Diger" # Diğer bölgelere dahil olan iller için bir kategori belirleyin
  ))
ggplot(new_tidy_data %>% filter(yil == 2022), aes(gocNedeni, gocSayisi, color = bolge)) +
  geom_jitter(width = 0.1, height = 0.1,alpha = 0.7) +  # Jittering ile daha fazla aralık
  labs(title = "2022 Yılına Göre Göç Nedenleri ve Bölgelere Göre Dağılımı",
       x = "Goc Nedeni",
       y = "Goc Sayısı",
       color = "Bolge") +
  scale_y_continuous(limits = c(2, max(90000)), breaks = seq(0, max(new_tidy_data$gocSayisi), by = 20000)) +  # Y ekseni aralığını ve etiketlerini ayarla
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.10),
        axis.text.x = element_text(angle = 45, hjust = 1))  # X eksenindeki etiketleri 45 derece döndür
```

# Analiz

xxxxxx

## Keşifsel Veri Analizi

xxxxxx

## Trend Analizi

xxxxxx

## Model Uydurma

xxxxxx

## Sonuçlar

xxxxxx

# Sonuçlar ve Ana Çıkarımlar

xxxxxx
